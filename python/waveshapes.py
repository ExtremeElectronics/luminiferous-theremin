#############################################################################
#
# waveshapes.py
# Calculate Single Cycle Waveforms from maths and from samples
# Part of Luminiferous Theremin https://github.com/ExtremeElectronics/luminiferous-theremin
# Licence
# BSD 3-Clause License
#
# Copyright (c) 2024, Extreme Electronics / Extreme Kits
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
#AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
#IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
#DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
#FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
#DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
#SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
#CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#
#############################################################################

import math,random
from tkinter import *
from tkinterdnd2 import *
from tkinter import messagebox
from tkinter import filedialog
import os
import pyaudio

geomx=0
geomy=0

max=256
maxv=255

# change path to your output directory.
#path="c:\\temp\\"
path=""

MAXTABLES =16

random.seed()
programname = os.path.basename(__file__)

azero=maxv/2 #analogue zero

zero =[azero] * max

# calculted
sinw =[0] * max
square =[0] * max
tri =[0] * max
sq2 =[0] * max
sawtooth =[0] * max
organ = [0] * max
organ2 = [0] * max
trumpet = [0] * max
clarinet = [0] * max
bassoon = [0] * max
flute = [0] * max
harp =[0] *max

# randarr = [0] * max


# sampled
#organsample = [ 0x9b, 0x7c, 0xa4, 0x7b, 0xac, 0x78, 0xae, 0x75, 0xae, 0x7a, 0xaf, 0x86, 0xb0, 0x8f, 0xab, 0x92,0xa4, 0x92, 0x9b, 0x8f, 0x92, 0x8f, 0x85, 0x85, 0x76, 0x71, 0x6e, 0x61, 0x6b, 0x54, 0x6d, 0x4a,0x6f, 0x48, 0x6e, 0x4a, 0x6e, 0x4e, 0x78, 0x5c, 0x83, 0x6c, 0x82, 0x75, 0x7e, 0x80, 0x7e, 0x8e,0x82, 0x97, 0x80, 0x95, 0x78, 0x90, 0x78, 0x8f, 0x7e, 0x93, 0x80, 0x94, 0x7d, 0x8e, 0x79, 0x89,0x78, 0x8c, 0x74, 0x8f, 0x6c, 0x8e, 0x5e, 0x89, 0x51, 0x7c, 0x4d, 0x73, 0x4f, 0x6c, 0x4f, 0x63,0x56, 0x63, 0x63, 0x6b, 0x73, 0x72, 0x7c, 0x75, 0x80, 0x76, 0x87, 0x79, 0x91, 0x88, 0x91, 0x97,0x87, 0x99, 0x7f, 0x96, 0x7a, 0x91, 0x78, 0x8a, 0x76, 0x83, 0x70, 0x7c, 0x69, 0x71, 0x68, 0x68,0x6e, 0x63, 0x6d, 0x5d, 0x66, 0x5b, 0x64, 0x63, 0x65, 0x6b, 0x61, 0x6c, 0x5a, 0x67, 0x59, 0x63,0x59, 0x67, 0x57, 0x6e, 0x56, 0x6e, 0x5a, 0x6d, 0x64, 0x73, 0x6e, 0x79, 0x78, 0x7d, 0x7e, 0x80,0x84, 0x82, 0x94, 0x8d, 0xa0, 0x9a, 0xa1, 0x9e, 0x9d, 0x9e, 0x9c, 0xa3, 0x9c, 0xa6, 0x97, 0xa2,0x8f, 0x9b, 0x8a, 0x94, 0x89, 0x8f, 0x88, 0x87, 0x82, 0x77, 0x7a, 0x69, 0x74, 0x60, 0x72, 0x5e,0x72, 0x5f, 0x70, 0x60, 0x69, 0x5c, 0x65, 0x56, 0x69, 0x56, 0x6c, 0x51, 0x6f, 0x51, 0x75, 0x5c,0x66, 0x89, 0x68, 0x89, 0x63, 0x8b, 0x5f, 0x92, 0x64, 0x97, 0x71, 0x94, 0x77, 0x8f, 0x75, 0x80,0x90, 0x78, 0x97, 0x80, 0xa0, 0x89, 0xa2, 0x91, 0xa0, 0x98, 0xa8, 0x9d, 0xb7, 0xa2, 0xc2, 0xa5,0xc2, 0xa6, 0xc3, 0xae, 0xc8, 0xb8, 0xca, 0xbe, 0xc7, 0xc0, 0xbe, 0xbb, 0xb5, 0xb5, 0xa7, 0xb0,0x97, 0xa3, 0x87, 0x91, 0x7b, 0x82, 0x75, 0x74, 0x75, 0x6a, 0x75, 0x65, 0x70, 0x60, 0x70, 0x8e]
biglead = [0xaf, 0xab, 0xa7, 0xae, 0xa7, 0x96, 0x7d, 0x7f, 0x88, 0x90, 0xa3, 0xa6, 0x94, 0x81, 0x8d, 0x90, 0x82, 0x75, 0x6c, 0x75, 0x88, 0x8e, 0x88, 0x88, 0x8c, 0x93, 0x9b, 0xa5, 0x93, 0x65, 0x43, 0x2b, 0x1e, 0x19, 0x17, 0x17, 0x26, 0x43, 0x52, 0x49, 0x4a, 0x4f, 0x56, 0x5f, 0x68, 0x6a, 0x6b, 0x6a, 0x6e, 0x72, 0x77, 0x79, 0x77, 0x74, 0x71, 0x6a, 0x61, 0x5a, 0x53, 0x50, 0x5e, 0x72, 0x73, 0x6f, 0x5e, 0x55, 0x56, 0x5e, 0x6b, 0x77, 0x84, 0x99, 0x9f, 0x9f, 0x9a, 0xae, 0xca, 0xda, 0xdc, 0xd5, 0xd6, 0xd2, 0xd4, 0xd8, 0xdb, 0xcd, 0xbe, 0xb1, 0xa8, 0xa8, 0xb6, 0xc9, 0xc4, 0xbe, 0xba, 0xc1, 0xd4, 0xd3, 0xb8, 0xa6, 0xa3, 0xab, 0xb0, 0x9f, 0x90, 0x8c, 0x87, 0x86, 0x92, 0xa9, 0x9f, 0x7c, 0x72, 0x69, 0x52, 0x43, 0x41, 0x41, 0x41, 0x38, 0x36, 0x42, 0x48, 0x53, 0x5b, 0x66, 0x6d, 0x6f, 0x62, 0x54, 0x54, 0x5e, 0x6c, 0x6d, 0x66, 0x6b, 0x7c, 0x7d, 0x76, 0x77, 0x7b, 0x78, 0x76, 0x78, 0x65, 0x68, 0x72, 0x71, 0x73, 0x61, 0x60, 0x6b, 0x7a, 0x78, 0x6d, 0x59, 0x53, 0x45, 0x62, 0x96, 0x9f, 0xad, 0xc0, 0xbf, 0xc0, 0xc4, 0xc2, 0xb1, 0xa1, 0x96, 0x97, 0x9e, 0xac, 0xaa, 0xa3, 0x9b, 0x9f, 0xa0, 0x86, 0x94, 0xa6, 0xa1, 0x92, 0x99, 0x9f, 0x96, 0x87, 0x77, 0x77, 0x89, 0x90, 0x80, 0x59, 0x51, 0x5f, 0x67, 0x67, 0x62, 0x55, 0x3e, 0x22, 0x13, 0x11, 0x11, 0x10, 0x15, 0x26, 0x38, 0x43, 0x55, 0x60, 0x5c, 0x5c, 0x63, 0x6e, 0x7b, 0x7c, 0x71, 0x6c, 0x70, 0x7b, 0x7b, 0x71, 0x6a, 0x67, 0x64, 0x5d, 0x5c, 0x5c, 0x5a, 0x6e, 0x81, 0x86, 0x89, 0x7a, 0x6c, 0x6d, 0x75, 0x7e, 0x81, 0x89, 0xb7, 0xcd, 0xcc, 0xc9, 0xc2, 0xe2, 0xf2, 0xea, 0xdf, 0xd0, 0xcb, 0xc8, 0xbc, 0xbd, 0xc5, ]
trombone = [0xd5, 0xda, 0xba, 0xad, 0xa5, 0x8f, 0x80, 0x76, 0x64, 0x54, 0x4b, 0x3f, 0x33, 0x2e, 0x28, 0x21, 0x1e, 0x1c, 0x18, 0x18, 0x1a, 0x1b, 0x1e, 0x23, 0x27, 0x2a, 0x30, 0x35, 0x39, 0x3f, 0x44, 0x49, 0x4f, 0x55, 0x59, 0x5f, 0x65, 0x6a, 0x6f, 0x75, 0x7a, 0x7e, 0x83, 0x87, 0x8a, 0x8d, 0x8f, 0x8f, 0x90, 0x90, 0x8f, 0x8f, 0x8e, 0x8e, 0x8d, 0x8d, 0x8c, 0x8b, 0x8a, 0x87, 0x85, 0x83, 0x81, 0x80, 0x7e, 0x7d, 0x7c, 0x7c, 0x7c, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x83, 0x85, 0x87, 0x88, 0x8a, 0x8c, 0x8d, 0x8f, 0x91, 0x92, 0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa3, 0xa4, 0xa4, 0xa4, 0xa3, 0xa3, 0xa2, 0xa1, 0xa0, 0xa0, 0x9f, 0x9e, 0x9e, 0x9e, 0x9f, 0xa1, 0xa2, 0xa3, 0xa3, 0xa2, 0x9e, 0x9a, 0x94, 0x8f, 0x89, 0x84, 0x80, 0x7d, 0x7b, 0x79, 0x78, 0x78, 0x78, 0x77, 0x77, 0x77, 0x77, 0x77, 0x77, 0x78, 0x79, 0x7a, 0x7c, 0x7f, 0x81, 0x84, 0x87, 0x8b, 0x90, 0x96, 0x9e, 0xa6, 0xb0, 0xb9, 0xc0, 0xc5, 0xc5, 0xc2, 0xbc, 0xb4, 0xaa, 0xa1, 0x96, 0x8c, 0x82, 0x79, 0x70, 0x67, 0x5f, 0x58, 0x52, 0x4c, 0x47, 0x43, 0x40, 0x3d, 0x3b, 0x3a, 0x3a, 0x3b, 0x3c, 0x3e, 0x41, 0x44, 0x48, 0x4d, 0x53, 0x59, 0x5f, 0x66, 0x6c, 0x72, 0x78, 0x7d, 0x81, 0x86, 0x8a, 0x8e, 0x93, 0x98, 0x9d, 0xa3, 0xaa, 0xb0, 0xb5, 0xb9, 0xb8, 0xb5, 0xaf, 0xa8, 0x9f, 0x96, 0x8d, 0x84, 0x7c, 0x74, 0x6c, 0x64, 0x5f, 0x5a, 0x56, 0x54, 0x52, 0x50, 0x50, 0x50, 0x4f, 0x51, 0x53, 0x54, 0x58, 0x5d, 0x60, 0x65, 0x6c, 0x71, 0x76, 0x7d, 0x81, 0x85, 0x8c, 0x91, 0x93, 0x99, 0x9e, 0x9f, 0xa3, 0xa9, 0xa9, 0xac, 0xb3, 0xb3, 0xb4, 0xbc, 0xbf, 0xc0, 0xce, 0xd9, 0xd8, 0xeb, 0xff, 0xd4, ]
#harp = [0x8a, 0x7e, 0x71, 0x63, 0x55, 0x4e, 0x49, 0x3c, 0x2f, 0x2b, 0x24, 0x1b, 0x17, 0x13, 0x10, 0x0f, 0x12, 0x1a, 0x24, 0x2f, 0x3b, 0x48, 0x56, 0x69, 0x7d, 0x8e, 0xa1, 0xb0, 0xb4, 0xb2, 0xb3, 0xb4, 0xb3, 0xaf, 0xaa, 0xa2, 0x98, 0x8e, 0x86, 0x7f, 0x77, 0x72, 0x71, 0x68, 0x57, 0x4d, 0x47, 0x3e, 0x36, 0x2e, 0x24, 0x1a, 0x12, 0x0e, 0x10, 0x17, 0x20, 0x2b, 0x38, 0x46, 0x57, 0x66, 0x76, 0x8c, 0x9f, 0xa1, 0x9f, 0xa1, 0xa2, 0xa2, 0xa1, 0x9d, 0x97, 0x90, 0x8b, 0x86, 0x81, 0x7b, 0x75, 0x6d, 0x65, 0x5c, 0x54, 0x4e, 0x47, 0x42, 0x3d, 0x3b, 0x3b, 0x3c, 0x3b, 0x3a, 0x3b, 0x3f, 0x42, 0x47, 0x4d, 0x52, 0x56, 0x62, 0x73, 0x7a, 0x78, 0x7f, 0x87, 0x8c, 0x91, 0x93, 0x94, 0x94, 0x94, 0x93, 0x91, 0x90, 0x8f, 0x8d, 0x8b, 0x88, 0x87, 0x86, 0x85, 0x82, 0x80, 0x7e, 0x7b, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x80, 0x80, 0x7d, 0x7a, 0x77, 0x77, 0x7b, 0x80, 0x82, 0x86, 0x8a, 0x8c, 0x8c, 0x8a, 0x89, 0x8a, 0x8c, 0x8b, 0x8b, 0x8c, 0x8f, 0x92, 0x94, 0x96, 0x98, 0x9b, 0x9d, 0x9e, 0x9e, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa5, 0xa6, 0xa6, 0xa6, 0xa5, 0xa4, 0xa2, 0xa0, 0x9e, 0x9c, 0x98, 0x97, 0x97, 0x99, 0x9c, 0x9e, 0x9f, 0x9f, 0x9f, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa6, 0xab, 0xb0, 0xb6, 0xba, 0xbe, 0xc2, 0xc5, 0xc7, 0xc9, 0xc9, 0xc9, 0xc8, 0xc7, 0xc5, 0xc2, 0xbe, 0xb7, 0xb0, 0xa9, 0xa2, 0x9c, 0x98, 0x90, 0x86, 0x82, 0x83, 0x87, 0x8c, 0x90, 0x94, 0x99, 0x9d, 0x9f, 0x9f, 0x9e, 0x9d, 0x9d, 0x9e, 0xa0, 0xa2, 0xa1, 0xa0, 0xa0, 0xa3, 0xa8, 0xb1, 0xba, 0xc2, 0xc6, 0xca, 0xce, 0xd0, 0xd0, 0xcd, 0xc9, 0xc2, 0xba, 0xb1, 0xac, 0xa8, 0xa0, 0x98, 0x97, ]
musicbox = [0x7b, 0x80, 0x84, 0x88, 0x8b, 0x8e, 0x92, 0x96, 0x9a, 0x9e, 0xa1, 0xa3, 0xa5, 0xa5, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa6, 0xa5, 0xa4, 0xa2, 0x9e, 0x9b, 0x97, 0x94, 0x92, 0x90, 0x8d, 0x89, 0x84, 0x7f, 0x7a, 0x75, 0x70, 0x6d, 0x69, 0x65, 0x60, 0x5b, 0x56, 0x51, 0x4c, 0x48, 0x45, 0x42, 0x3f, 0x3d, 0x3b, 0x3a, 0x39, 0x39, 0x38, 0x38, 0x37, 0x36, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3a, 0x3b, 0x3d, 0x40, 0x43, 0x47, 0x4c, 0x51, 0x56, 0x5a, 0x5e, 0x62, 0x67, 0x6c, 0x72, 0x78, 0x7f, 0x85, 0x8b, 0x91, 0x97, 0x9d, 0xa1, 0xa6, 0xab, 0xb1, 0xb9, 0xc2, 0xc6, 0xc5, 0xc5, 0xc7, 0xce, 0xd8, 0xe2, 0xea, 0xef, 0xf0, 0xef, 0xed, 0xea, 0xe9, 0xe9, 0xea, 0xeb, 0xec, 0xeb, 0xea, 0xe7, 0xe4, 0xe0, 0xdc, 0xd7, 0xd3, 0xce, 0xc9, 0xc5, 0xc1, 0xbc, 0xb6, 0xb0, 0xa9, 0xa3, 0x9c, 0x97, 0x91, 0x8b, 0x84, 0x7e, 0x75, 0x6c, 0x63, 0x5b, 0x54, 0x4e, 0x48, 0x44, 0x40, 0x3b, 0x37, 0x33, 0x2f, 0x2c, 0x29, 0x28, 0x27, 0x28, 0x29, 0x2b, 0x2e, 0x31, 0x34, 0x37, 0x3b, 0x3f, 0x44, 0x4a, 0x50, 0x56, 0x5c, 0x61, 0x67, 0x6b, 0x71, 0x76, 0x7c, 0x81, 0x87, 0x8d, 0x91, 0x95, 0x98, 0x9b, 0x9d, 0xa0, 0xa2, 0xa5, 0xa8, 0xa9, 0xaa, 0xaa, 0xa9, 0xa8, 0xa7, 0xa6, 0xa4, 0xa3, 0xa1, 0x9e, 0x9a, 0x96, 0x91, 0x8d, 0x89, 0x86, 0x82, 0x7f, 0x7b, 0x76, 0x71, 0x6c, 0x67, 0x63, 0x5e, 0x5a, 0x56, 0x53, 0x4f, 0x4c, 0x49, 0x47, 0x46, 0x45, 0x43, 0x41, 0x3f, 0x3e, 0x3d, 0x3d, 0x3b, 0x39, 0x37, 0x36, 0x36, 0x37, 0x39, 0x3b, 0x3c, 0x3e, 0x3f, 0x41, 0x43, 0x45, 0x47, 0x4a, 0x4e, 0x53, 0x58, 0x5c, 0x61, 0x66, 0x6a, 0x6f, 0x73, 0x79, 0x7f, 0x85, 0x8e, 0x93, 0x96, 0x99, 0x9e, 0xa5, ]
Harpsichord = [0x84, 0x84, 0x87, 0x88, 0x88, 0xa8, 0xb9, 0x95, 0x9c, 0x74, 0x75, 0x66, 0x67, 0x7e, 0x80, 0x6c, 0x58, 0x49, 0x43, 0x58, 0x53, 0x6b, 0x62, 0x77, 0x54, 0x51, 0x7a, 0x4b, 0x5a, 0x51, 0x4a, 0x37, 0x59, 0x4c, 0x51, 0x68, 0x73, 0x71, 0x7a, 0x83, 0x76, 0x62, 0x3f, 0x40, 0x43, 0x4c, 0x75, 0x8a, 0x91, 0xb1, 0x99, 0xa9, 0x9b, 0xa7, 0xa7, 0xa5, 0x94, 0x85, 0x84, 0x6f, 0x5b, 0x49, 0x61, 0x6a, 0x78, 0x80, 0x93, 0x99, 0x75, 0x6f, 0x5e, 0x40, 0x3b, 0x32, 0x52, 0x6f, 0x8e, 0x90, 0x8c, 0x8b, 0x73, 0x63, 0x77, 0x98, 0xab, 0xb1, 0xa6, 0x8b, 0x77, 0x7a, 0x79, 0x74, 0x95, 0xab, 0xbd, 0xbc, 0xce, 0xbc, 0xa1, 0x7c, 0x54, 0x3f, 0x46, 0x4c, 0x56, 0x67, 0x62, 0x69, 0x5d, 0x4b, 0x41, 0x55, 0x40, 0x54, 0x54, 0x6a, 0x6b, 0x6b, 0x62, 0x63, 0x66, 0x63, 0x77, 0x7b, 0x77, 0x6c, 0x62, 0x64, 0x72, 0x81, 0x98, 0x94, 0x8c, 0x96, 0x8b, 0x9d, 0xc1, 0xce, 0xc1, 0xd5, 0xc7, 0xbb, 0xa0, 0x8c, 0x70, 0x5c, 0x5d, 0x65, 0x75, 0x7c, 0x83, 0x6f, 0x5d, 0x39, 0x56, 0x4a, 0x68, 0x7a, 0x7d, 0x98, 0x9c, 0x8a, 0x8e, 0x85, 0x7c, 0x80, 0x9e, 0xa9, 0xb2, 0xaa, 0x9d, 0x9d, 0x7d, 0x90, 0x91, 0x88, 0x8e, 0xa5, 0xb5, 0xdf, 0xe2, 0xc3, 0xcc, 0xb1, 0x88, 0x70, 0x6e, 0x6f, 0x62, 0x60, 0x5c, 0x60, 0x54, 0x6a, 0x79, 0x98, 0x64, 0x6e, 0x57, 0x36, 0x65, 0x56, 0x63, 0x80, 0x75, 0x82, 0x7b, 0x75, 0x5b, 0x74, 0x80, 0x82, 0xa3, 0xac, 0xc2, 0x94, 0x7c, 0x78, 0x73, 0x83, 0xa5, 0xaf, 0xc4, 0xcf, 0xbe, 0xb2, 0xb3, 0xad, 0xa8, 0xb2, 0xb2, 0xad, 0xa1, 0xaa, 0x84, 0x7f, 0x55, 0x40, 0x66, 0x6e, 0x7e, 0x8d, 0x7a, 0x75, 0x7c, 0x53, 0x6e, 0x5c, 0x73, 0x78, 0x97, 0x82, 0x85, 0x91, 0x96, 0xa9, ]

wnames=[' '] * MAXTABLES

# create TK root
root = TkinterDnD.Tk()

steprad=2 * math.pi/max

# harmonic h1=fundamental h2= 2nd harmonic h3= third harmonic
# phase 1=in phase, 0.5=180 degrees , 0.25 90 degrees
# amplitude 1= full, 0=off

def sinwave(x,harmonic,phase,amplitude):
    v = math.sin(x * steprad * harmonic + max*phase) * azero * amplitude
    return v

def squarewave(x,harmonic,phase,amplitude):
    p = (x * harmonic + phase * max) % max
    if p > max/2 :
        v = 0- maxv * amplitude
    else :
        v = maxv * amplitude

    return v

def sawtoothwave(x,harmonic,phase,amplitude):
    p=(x * harmonic + phase*max) % max
    if p > max/2 :
        v = p * maxv*amplitude / max * 2
    else:
        v= maxv*amplitude - ((p - max / 2) * maxv / max * 2)
    return v


# steprad=2 * math.pi/max
for x in range(max):

    # signwave
    # sinw[x] =sinwave(x,1,1,1 )

    sinw[x] = sinwave(x, 1, 0, 1)

    # square wave
    square[x]=squarewave(x,1,1,1)

    # triangle
    tri[x] = x * maxv / max

    # Square2
    sq2[x] = squarewave(x,1,1,0.5) + \
             squarewave(x, 4, 0.5, 0.5)

    #sawtooth
    sawtooth[x] = sawtoothwave(x,1,1,1)

    #organ
    organ[x] = sinwave(x,1,0,1 ) + \
               sinwave(x,2,0,0.5 )

    #organ2
    organ2[x] = sinwave(x,2,0.5,1 ) + \
                sinwave(x,4,0,1 )

    #trumpet
    trumpet[x] = sinwave(x,1,0,1 ) + \
                 sinwave(x,3,0,0.5 ) + \
                 sinwave(x,5, 0, 0.5) + \
                 sinwave(x,7, 0, 0.5)

    #clarinet
    clarinet[x] = sinwave(x,1,0,1 ) + \
                  sinwave(x,5,0,0.3 ) + \
                  sinwave(x,7, 0, 0.3)
    #bassoon
    bassoon[x] = sinwave(x,3,0,1 ) + \
                 sinwave(x,2,0,0.5 ) + \
                 sinwave(x,4, 0, 0.2)

    #flute
    flute[x] =  sinwave(x,1,0,0.8) + \
                sinwave(x,3,0,0.1 ) + \
                sinwave(x,4,0,0.1 ) + \
                sinwave(x,5, 0, 0.1)


    harp[x] = sinwave(x,1,0,1 ) + \
                squarewave(x, 2, 0.5, 0.2)

def normalise(array):
    nmax=0
    nmin=maxv
    for x in range(0,max) :
        v=array[x]
        if v>nmax:nmax=v
        if v<nmin:nmin=v

    scale=255/(nmax-nmin)
    z=(nmax-nmin)/2
    print ("Min %f, Max %f, Scale %f, Z %f " % (nmin,nmax,scale,z))
    r=[]
    for x in range(0,max):
        v = array[x] * scale -nmin *scale
        r.append(int(v))
        if (v>255) or v<0:
            print(int(v))
    return r

def play_array(array,prate):
    duration=(prate/128000)*300
    buff = bytearray(0)
    for a in array :
        buff.append(int(a))

    p = pyaudio.PyAudio()
    stream = p.open(format=pyaudio.paUInt8,
                    channels=1,
                    rate=prate,
                    output=True,
                    frames_per_buffer=max)
    for x in range(int(duration)):
       for b in range(0,max):
            stream.write(buff[b].to_bytes(1,"big"))

    stream.stop_stream()
    stream.close()

    p.terminate()

def test_play_array(array):
    #play_array(array,32000)
    play_array(array,261 * max) #c4
    play_array(array,523 * max) #c5
    #play_array(array,256000)

def writearray(warray,arrayname,tn):
    warray=normalise(warray)
    file_out_c.write("//array %s\n" % arrayname)

    file_out_c.write("{\n")
    c = 0
    for b in warray[0:256]:
        file_out_c.write("0x%02x" % int(b))
        file_out_c.write(",")
        c = c + 1
        if (c > 15):
            file_out_c.write("\n")
            c = 0
    file_out_c.write(" },\n")

    wnames[tn]=arrayname

    plotarray(warray, arrayname)

def plotarray(drawarray,arrayname):
    global geomx,geomy
    newwindow= Toplevel()
    newwindow.title(arrayname)
    newwindow.geometry("515x270+"+str(geomx*600)+"+"+str(geomy*300))
    canvas = Canvas(newwindow, width=515, height=270)
    button = Button(newwindow,text=arrayname,command=lambda: test_play_array(drawarray))
    #button.pack()
    button1_window = canvas.create_window(10, 10, anchor=NW, window=button)
    canvas.pack()
    oldx = 0
    oldy = 260-drawarray[0]
    for x in range(256):
        y = 260-drawarray[x]
        canvas.create_line(oldx * 2, oldy + 2, x * 2, y + 2)
        oldx = x
        oldy = y
    geomx+=1
    if geomx>3:
        geomx=0
        geomy+=1


file_out_c = open(path + "waveshapes.c", 'w')
file_out_c.write("//Created by " + programname + "\n")
file_out_c.write("//maxvalue %i\n" % maxv)
file_out_c.write("//array size %i\n\n" % max)
file_out_c.write("#include \"waveshapes.h\" \n\n")
file_out_c.write("//--------------------------------------------------------------------------\n\n")
file_out_c.write("\n")

#file_out_c.write("const uint8_t waveshapes[%i][%i] = {\n" % (MAXTABLES,max) )
file_out_c.write("const uint8_t waveshapes[WAVMAX][%i] = {\n" % (max) )

writearray(sinw,"Sine",0)
writearray(square,"Square",1)
writearray(tri,"Tri",2)
writearray(sq2,"Sq2",3)
writearray(sawtooth,"Sawtooth",4)
writearray(organ,"Organ",5)

writearray(trumpet,"Trumpet",6)
writearray(clarinet,"Clarinet",7)
writearray(bassoon,"Bassoon",8)
writearray(flute,"Flute",9)

writearray(Harpsichord,"Spinet",10)
writearray(organ2,"Organ2",11)
writearray(harp,"Harp",12)
writearray(biglead,"BigLead",13)
writearray(trombone,"Trombone",14)
writearray(musicbox,"Musicbox",15)

file_out_c.write("};\n")

file_out_c.write("\nchar wavenames[%i][20]= {\n" % MAXTABLES)
for n in wnames:
    file_out_c.write("    \"%s\\0\",\n" % n)
file_out_c.write("};\n")
file_out_c.close()

# write the .h
file_out_h = open(path + "waveshapes.h", 'w')
file_out_h.write("//Created by " + programname + "\n\n")
file_out_h.write("#define WAVMAX %i\n\n" % MAXTABLES)
file_out_h.write("const uint8_t waveshapes[WAVMAX][256];\n")
file_out_h.write("char wavenames[WAVMAX][20];\n\n")
file_out_h.close()

# display windows.
root.geometry("100x50+"+str(geomx*600)+"+"+str(geomy*310))
root.mainloop()
